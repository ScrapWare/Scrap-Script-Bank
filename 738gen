#!/usr/bin/perl

#use Audio::DSP;

use strict;
use warnings::register;

require "/usr/lib/perl5/5.18.1/x86_64-linux-thread-multi/sys/ioctl.ph";

# Bitfield layout of ioctl command word
use constant     IOC_NRBITS   =>  8;
use constant     IOC_TYPEBITS =>  8;
use constant     IOC_SIZEBITS => 14;
use constant     IOC_DIRBITS  =>  2;

# Decoding masks
use constant     IOC_NRMASK   => ((1 << IOC_NRBITS) - 1 );
use constant     IOC_TYPEMASK => ((1 << IOC_TYPEBITS) - 1 );
use constant     IOC_SIZEMASK => ((1 << IOC_SIZEBITS) - 1 );
use constant     IOC_DIRMASK  => ((1 << IOC_DIRBITS) - 1 );

# Shift amounts derived from bitfield widths
use constant     IOC_NRSHIFT   => 0;
use constant     IOC_TYPESHIFT => (IOC_NRSHIFT + IOC_NRBITS);
use constant     IOC_SIZESHIFT => (IOC_TYPESHIFT + IOC_TYPEBITS);
use constant     IOC_DIRSHIFT  => (IOC_SIZESHIFT + IOC_SIZEBITS);

# Direction encoding
use constant     IOC_NONE  => 0;
use constant     IOC_WRITE => 1;
use constant     IOC_READ  => 2;

# Convenience constants
use constant IOC_IN        => (IOC_WRITE << IOC_DIRSHIFT);
use constant IOC_OUT       => (IOC_READ << IOC_DIRSHIFT);
use constant IOC_INOUT     => ((IOC_WRITE|IOC_READ) << IOC_DIRSHIFT);
use constant IOCSIZE_MASK  => (IOC_SIZEMASK << IOC_SIZESHIFT);
use constant IOCSIZE_SHIFT => (IOC_SIZESHIFT);

# Control word packing
# arguments: direction, type, nr, size
sub _IOC ($$$$) {
    ($_[0] & IOC_DIRMASK)  << IOC_DIRSHIFT  |
    ($_[1] & IOC_TYPEMASK) << IOC_TYPESHIFT |
    ($_[2] & IOC_NRMASK)   << IOC_NRSHIFT   |
    ($_[3] & IOC_SIZEMASK) << IOC_SIZESHIFT
}

# arguments: type, nr
sub _IO ($$) {
    _IOC( IOC_NONE, $_[0], $_[1], 0)
}

# arguments: type, nr, size
sub _IOR ($$$) {
    _IOC( IOC_READ, $_[0], $_[1], $_[2])
}

# arguments type, nr, size
sub _IOW ($$$) {
    _IOC( IOC_WRITE, $_[0], $_[1], $_[2])
}

# arguments type, nr, size
sub _IOWR ($$$) {
    _IOC( IOC_WRITE | IOC_READ, $_[0], $_[1], $_[2])
}

# Decode ioctl numbers
sub _IOC_DIR ($;@) {
    $_[0] >> IOC_DIRSHIFT & IOC_DIRMASK
}

sub _IOC_TYPE ($;@) {
    $_[0] >> IOC_TYPESHIFT & IOC_TYPEMASK
}

sub _IOC_NR ($;@) {
    $_[0] >> IOC_NRSHIFT & IOC_NRMASK
}

sub _IOC_SIZE ($;@) {
    $_[0] >> IOC_SIZESHIFT & IOC_SIZEMASK
}

use constant PI => 3.14159265;
use constant SW => 7.38;

our $FQ = SW;
our $SR = 44100;
our $SS = $SR/$FQ;
our $SQ = 2*PI;
our $QR = 8;
our $QV = (2**$QR/2)*0.75;
our $CH = 1;
our $BS = $QR/8;
our $BA = $BS*$CH;
our $DL = $SR*$BA;
our $SA = $DL/$SS;
our $PS = ($BS > 1)? 's' : 'C';
our $WS = $DL;
our $FS = $WS +36;

our $WH = pack('A4','RIFF').pack('L', $FS).pack('A8', 'WAVEfmt ')
           # Chank Length
           .pack('L', 16)
           # PCM Type
           .pack('S', 1)
           # Channel
           .pack('S', $CH)
           # Rate
           .pack('L', $SR)
           # Data Length
           .pack('L', $DL)
           # BlockAlign
           .pack('S', $BA)
           # Bit
           .pack('S', $QR)
           # Chunk
           .pack('A4','data')
           # DataSize
           .pack('L', $WS);

my $d = $WH;

print STDOUT unpack('H*', $d);
print STDOUT "\n";
print STDOUT unpack('A4 L A8 L S S L L S S L A4 L', $d);
print STDOUT "\n" . length($d) . "\n\n";

print STDOUT <<__END_OF_OUTPUT__;
 SAMPLE-BIT: $QR
 HORIZONTAL: $QV
PACK-STRING: \x27$PS\x27
SAMPLE-RATE: $SR
    CHANNEL: $CH
DATA-LENGTH: $DL
BLOCK-ALIGN: $BA
  WAVE-SIZE: $WS

__END_OF_OUTPUT__

if($QR == 8){
  for(my $i=0;$i<$WS;$i++){
    my $b = $QV * sin( $SQ * $i / $SS ) + $QV;
    $d .= pack($PS, $b);
    #print STDOUT "$b\n";
    #print STDOUT ' ' x (($b / 8) + 32) . "-\n";
    #Time::HiRes::sleep(0.02);
  }
} else{
  for(my $i=0;$i<$WS;$i++){
    my $b = sin( $SQ * $i / $SS ) * $QV;
    $d .= pack($PS, $b);
  }
}

=test1 Audio::DSP
my $dsp = new Audio::DSP(buffer   => $FS,
                         channels => $CH,
                         format   => ($QR == 8)? AFMT_U8 : AFMT_S16_LE,
                         rate     => $SR
                         );
$dsp->init() || die $dsp->errstr(); $dsp->write($d); $dsp->close();
=cut

=test2 ioctl
665 #define SOUND_PCM_READ_RATE             _SIOR ('P', 2, int)
666 #define SOUND_PCM_READ_CHANNELS         _SIOR ('P', 6, int)
667 #define SOUND_PCM_READ_BITS             _SIOR ('P', 5, int)
668 #define SOUND_PCM_READ_FILTER           _SIOR ('P', 7, int)

 44 #define _IO(type,nr)        _IOC(_IOC_NONE,(type),(nr),0)
 45 #define _IOR(type,nr,size)  _IOC(_IOC_READ,(type),(nr),sizeof(size))
 46 #define _IOW(type,nr,size)  _IOC(_IOC_WRITE,(type),(nr),sizeof(size))
 47 #define _IOWR(type,nr,size) _IOC(_IOC_READ|_IOC_WRITE,(type),(nr),sizeof(size))

555 #define SNDCTL_DSP_SETFMT               _SIOWR('P',5, int) /* Selects ONE fmt*/
556 #       define AFMT_QUERY               0x00000000      /* Return current fmt */
557 #       define AFMT_MU_LAW              0x00000001
558 #       define AFMT_A_LAW               0x00000002
559 #       define AFMT_IMA_ADPCM           0x00000004
560 #       define AFMT_U8                  0x00000008
561 #       define AFMT_S16_LE              0x00000010      /* Little endian signed 16*/
562 #       define AFMT_S16_BE              0x00000020      /* Big endian signed 16 */
563 #       define AFMT_S8                  0x00000040
564 #       define AFMT_U16_LE              0x00000080      /* Little endian U16 */
565 #       define AFMT_U16_BE              0x00000100      /* Big endian U16 */
566 #       define AFMT_MPEG                0x00000200      /* MPEG (2) audio */
567 #       define AFMT_AC3                 0x00000400      /* Dolby Digital AC3 */

542 #define SNDCTL_DSP_SPEED                _SIOWR('P', 2, int)
543 #define SNDCTL_DSP_STEREO               _SIOWR('P', 3, int)
544 #define SNDCTL_DSP_GETBLKSIZE           _SIOWR('P', 4, int)
545 #define SNDCTL_DSP_SAMPLESIZE           SNDCTL_DSP_SETFMT
546 #define SNDCTL_DSP_CHANNELS             _SIOWR('P', 6, int)
547 #define SOUND_PCM_WRITE_CHANNELS        SNDCTL_DSP_CHANNELS
548 #define SOUND_PCM_WRITE_FILTER          _SIOWR('P', 7, int)
549 #define SNDCTL_DSP_POST                 _SIO  ('P', 8)
550 #define SNDCTL_DSP_SUBDIVIDE            _SIOWR('P', 9, int)
551 #define SNDCTL_DSP_SETFRAGMENT          _SIOWR('P',10, int)
=cut

#my $SD = '/home/twinkle/test.wav';
my $SD = '/dev/dsp';

open(SND, '>'.$SD) || die "not exist $SD\n";
print fileno SND;
my $fno = pack('L', fileno(SND));
_IOWR($fno, 0x00000005, ($QR == 8)? 0x00000008 : 0x00000080);
_IOWR($fno, 0x00000002, pack('L', $SR));
_IOWR($fno, 0x00000006, pack('L', $CH));
syswrite SND, $d;
close SND;

__END__
